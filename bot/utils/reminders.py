import pytz
from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from sqlalchemy import select

from bot.database.models import Group
from bot.database.session import async_session
from bot.database.storage import get_users_without_training_today, reset_daily_pushups, get_all_types_training_group

MOSCOW_TZ = pytz.timezone("Europe/Moscow")


async def send_reminders(bot: Bot):
    async with async_session() as session:
        # –ë–µ—Ä—ë–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
        groups = await session.execute(select(Group))
        groups = groups.scalars().all()


        for group in groups:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
            training_types = await get_all_types_training_group(group.group_id)

            report_text = "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n–î–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å 3 —á–∞—Å–∞.\n\n"
            report_text += "‚ùå –≠—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –µ—â—ë –Ω–µ —Å–¥–µ–ª–∞–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n"

            for training_type in training_types:
                users_not_done = await get_users_without_training_today(group=group, training_type=training_type)
                print(users_not_done)
                if users_not_done:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å "–ø—Ä–æ–≥—É–ª—å—â–∏–∫–∏"
                    for user in users_not_done:
                        count = int(user.count) if user.count is not None else 0
                        report_text += f" ‚Ä¢ @{user.username} {user.record_type.upper()} (–æ—Å—Ç–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å - {int(user.required) - count})\n"
            else:
                # –í—Å–µ –º–æ–ª–æ–¥—Ü—ã
                report_text = "‚úÖ –í—Å–µ –º–æ–ª–æ–¥—Ü—ã! –°–µ–≥–æ–¥–Ω—è –≤—Å–µ —Å–¥–µ–ª–∞–ª–∏ –æ—Ç–∂–∏–º–∞–Ω–∏—è üéâ"

            try:
                await bot.send_message(chat_id=group.group_id, text=report_text, message_thread_id=group.topic_id)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É {group.group_id}: {e}")



async def send_daily_report(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ 00:00 –æ —Ç–µ—Ö, –∫—Ç–æ –Ω–µ —Å–¥–µ–ª–∞–ª –æ—Ç–∂–∏–º–∞–Ω–∏—è"""
    async with async_session() as session:
        groups = await session.execute(select(Group))
        groups = groups.scalars().all()

        for group in groups:

            report_text = "üìä –û—Ç—á–µ—Ç –∑–∞ –¥–µ–Ω—å:\n\n"
            report_text += "‚ùå –ù–µ —Å–¥–µ–ª–∞–ª–∏ –æ—Ç–∂–∏–º–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è:\n"

            training_types = await get_all_types_training_group(group.group_id)

            for training_type in training_types:
                users_not_done = await get_users_without_training_today(group=group)

                if users_not_done or len(users_not_done) > 0:
                    print(f'{users_not_done} {group.id} {group.group_id}')

                    for user in users_not_done:
                        report_text += f" ‚Ä¢ @{user.username} {user.record_type.upper()} –ë—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ - {user.count or 0}\n"

                    try:
                        await bot.send_message(chat_id=group.group_id, text=report_text, message_thread_id=group.topic_id)
                    except Exception as e:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É {group.group_id}:  {e}")

            await reset_daily_pushups(group.group_id)


def setup_reminders(bot: Bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    scheduler = AsyncIOScheduler(timezone=MOSCOW_TZ)

    scheduler.add_job(send_reminders,
                      trigger=CronTrigger(hour=21, minute=00),
                      args=[bot],
                      id='daily_reminders',
                      replace_existing=True)

    scheduler.add_job(send_daily_report,
                      trigger=CronTrigger(hour=0, minute=0),
                      args=[bot],
                      id='daily_report',
                      replace_existing=True)

    scheduler.start()