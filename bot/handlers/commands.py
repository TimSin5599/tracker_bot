from aiogram import F, Router, Bot
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from bot.database.session import async_session
from bot.database.storage import (
    update_user_activity, save_user_consent, get_or_create_group, get_all_types_training_group, add_training_type,
    get_user_stats
)
from bot.handlers.PossibleStates import PossibleStates
from config.settings import settings

router = Router()

@router.message(CommandStart())
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""

    user = message.from_user
    chat = message.chat
    topic_id = message.message_thread_id if message else None

    async with async_session() as session:
        await update_user_activity(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name,
            group_id=str(chat.id) if chat.type in ['group', 'supergroup', 'private'] else None,
            group_name=chat.title if chat.type in ['group', 'supergroup', 'private'] else None,
            topic_id=topic_id,
        )

    await save_user_consent(user.id, user.username, user.first_name)

    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–∂–∏–º–∞–Ω–∏–π!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
        "‚Ä¢ –í–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∂–∏–º–∞–Ω–∏–π üìä\n"
        "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ–± –æ—Ç–∂–∏–º–∞–Ω–∏—è—Ö ‚è∞\n"
        "‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º üèÜ\n\n"
        "–í–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä—É–∂–æ–∫ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /add –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ—Ç–∂–∏–º–∞–Ω–∏–π\n\n"
    )

@router.message(Command(commands='help'))
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
    üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

    –õ–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
    /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
    /stats - –õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

    –ì—Ä—É–ø–ø–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /group_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã
    /lazy - –ö—Ç–æ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª –æ—Ç–∂–∏–º–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è

    –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫—Ä—É–∂–æ—á–∫–∏ –≤ —á–∞—Ç: ‚óã ‚ö™ ‚≠ï üîµ
    1 –∫—Ä—É–∂–æ–∫ = N –æ—Ç–∂–∏–º–∞–Ω–∏–π
    """
    await message.answer(help_text)

@router.message(Command(commands='add_type'))
async def add_type(message: Message, state: FSMContext):
    await state.set_state(PossibleStates.create_training_type)
    await message.answer(
        '''–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å'''
    )

@router.message(PossibleStates.create_training_type)
async def create_training_type(message: Message, state: FSMContext):
    new_type = message.text.strip()
    group_id = str(message.chat.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø
    existing_types = await get_all_types_training_group(group_id=group_id)
    if new_type in existing_types:
        await message.answer("‚ùå –≠—Ç–æ—Ç —Ç–∏–ø —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return

    await add_training_type(group_id=group_id, training_type=new_type)
    await state.clear()

    await message.answer(f"‚úÖ –¢–∏–ø '{new_type}' —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")

@router.message(Command(commands='stats'))
async def stats_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –ø–æ –æ—Ç–∂–∏–º–∞–Ω–∏—è–º)"""
    user_id = message.from_user.id if message.from_user else None
    pushup_stats = await get_user_stats(user_id=user_id, type_record_id=1) # –î–æ–ø–æ–ª–Ω–∏—Ç—å type_record_id

    if not pushup_stats:
        await message.answer("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return

    response = "üìä –ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n"
    response += "üèÜ –û–¢–ñ–ò–ú–ê–ù–ò–Ø:\n"
    response += f"{message.from_user.username}:\n"
    response += f"   üìÖ –°–µ–≥–æ–¥–Ω—è: {pushup_stats['today']}\n"
    response += f"   üèãÔ∏è –í—Å–µ–≥–æ: {pushup_stats['total']}\n"

    await message.answer(response)

# @router.message(Command(commands='group_stats'))
# async def stats_group_command(message: Message):
#     """–ö–æ–º–∞–Ω–¥–∞ /group_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã"""
#     if message.chat.type not in ['group', 'supergroup']:
#         await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
#         return
#
#     chat_id = str(message.chat.id)
#
#     try:
#         stats = await get_group_stats(chat_id)
#
#         if not stats or not stats['members']:
#             await message.answer("üìä –í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–∂–∏–º–∞–Ω–∏—è—Ö")
#             return
#
#         response = f"üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã {stats['group_name']}:\n\n"
#         response += f"–í—Å–µ–≥–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π: {stats['total_pushups']} üèãÔ∏è\n"
#         response += f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats['member_count']} üë•\n\n"
#         response += "–¢–æ–ø —Å–µ–≥–æ–¥–Ω—è:\n"
#
#         for i, member in enumerate(stats['members'][:10], 1):
#             response += f"{i}. {member['username']}: {member['today_pushups']} –æ—Ç–∂–∏–º–∞–Ω–∏–π\n"
#
#         await message.answer(response)
#
#     except Exception as e:
#         await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
#         print(f"Error in stats_command: {e}")
#
# @router.message(Command(commands='lazy'))
# async def lazy_command(message: Message):
#     """–ö–æ–º–∞–Ω–¥–∞ /lazy - –ø–æ–∫–∞–∑–∞—Ç—å –∫—Ç–æ –Ω–µ —Å–¥–µ–ª–∞–ª –æ—Ç–∂–∏–º–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è"""
#     if message.chat.type not in ['group', 'supergroup']:
#         await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
#         return
#
#     group_id = str(message.chat.id)
#     topic_id = message.message_thread_id
#
#     # print(f"group_id: {update.effective_chat.id}, thread_id: {update.message.message_thread_id}")
#     group = await get_or_create_group(group_id=group_id, topic_id=topic_id)
#
#     try:
#         lazy_users = await get_users_without_pushups_today(group=group)
#
#         if not lazy_users:
#             await message.answer("‚úÖ –°–µ–≥–æ–¥–Ω—è –≤—Å–µ —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –æ—Ç–∂–∏–º–∞–Ω–∏—è! –ú–æ–ª–æ–¥—Ü—ã! üèÜ")
#             return
#
#         response = "üò¥ –ï—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ –æ—Ç–∂–∏–º–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è:\n\n"
#         for user in lazy_users:
#             response += f" ‚Ä¢ @{user.username} (–æ—Å—Ç–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å - {int(settings.REQUIRED_PUSHUPS) - user.pushups_today})\n"
#
#         response += "\n–î–∞–≤–∞–π—Ç–µ —á–µ–º–ø–∏–æ–Ω—ã, –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—èüí™"
#
#         await message.answer(response)
#
#     except Exception as e:
#         await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
#         print(f"Error in lazy_command: {e}")
#
# @router.message(Command(commands='remove'))
# async def remove_command(message: Message):
#     """–ö–æ–º–∞–Ω–¥–∞ /remove - —É–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π"""
#
#     group_id = str(message.chat.id)
#     topic_id = message.message_thread_id
#
#     group = await get_or_create_group(group_id=group_id, topic_id=topic_id)
#
#     try:
#         count_users_pushups = await get_today_pushups(user_id=message.from_user.id, group_id=group.group_id)
#
#         if not count_users_pushups:
#             await message.answer("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç–∂–∏–º–∞–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
#     except Exception as e:
#         await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
#
#     inline_keyboard = [
#         [InlineKeyboardButton(text="10 –æ—Ç–∂–∏–º–∞–Ω–∏–π", callback_data="remove_10"),
#          InlineKeyboardButton(text="15 –æ—Ç–∂–∏–º–∞–Ω–∏–π", callback_data="remove_15")],
#         [InlineKeyboardButton(text="20 –æ—Ç–∂–∏–º–∞–Ω–∏–π", callback_data="remove_20"),
#          InlineKeyboardButton(text="30 –æ—Ç–∂–∏–º–∞–Ω–∏–π", callback_data="remove_30"),
#          InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ —á–∏—Å–ª–æ", callback_data="remove_custom")],
#         [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="remove_0")]
#     ]
#
#     reply_markup = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
#
#     await message.answer(
#         "üí™ –°–∫–æ–ª—å–∫–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è?\n\n"
#         "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
#         "‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë —á–∏—Å–ª–æ\n"
#         "‚Ä¢ ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
#         reply_markup=reply_markup
#     )
#
# @router.callback_query(F.data.startswith("remove_"))
# async def handle_remove_count_callback(callback: CallbackQuery, state: FSMContext, bot: Bot):
#     state_user_id = await state.get_value('user_id')
#     if state_user_id is None:
#         return
#
#     if state_user_id != callback.from_user.id:
#         await bot.send_message(
#             chat_id=callback.message.chat.id,
#             message_thread_id=callback.message.message_thread_id,
#             text=f'''–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π –∑–∞ –¥—Ä—É–≥–∏—Ö'''
#         )
#         return
#
#     await callback.answer()
#
#     user_id = callback.from_user.id
#     group_id = callback.message.chat.id if callback.message else None
#     count_str = callback.data.split('_')[1]
#
#     if count_str == 'custom':
#         # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–î—Ä—É–≥–æ–µ —á–∏—Å–ª–æ" –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ
#         print("üîî –ó–∞–ø—Ä–æ—à–µ–Ω –≤–≤–æ–¥ —Å–≤–æ–µ–≥–æ —á–∏—Å–ª–∞")
#
#         keyboard = [
#             [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="remove_cancel")]
#         ]
#         reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
#
#         # –û–ß–ò–©–ê–ï–ú –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ
#         await state.clear()  # –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
#         await state.set_data({
#             'awaiting_remove_count': True,
#             'user_id': user_id,
#             'bot_msg_id': callback.message.message_id,
#         })
#
#         print(f"üîî –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è: {await state.get_data()}")
#
#         await callback.message.edit_text(
#             "üî¢ –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π:\n\n"
#             "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n"
#             "–ü—Ä–∏–º–µ—Ä—ã: 15, 30, 42\n\n",
#             reply_markup=reply_markup
#         )
#         return
#
#     elif count_str == '0' or count_str == 'cancel':
#         # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" - –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#         print("üîî –ü—Ä–æ–ø—É—Å–∫ –ø–æ–¥—Ö–æ–¥–∞ - —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
#         await callback.message.delete()
#         await state.clear()
#         return
#
#     else:
#         # –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
#         count = int(count_str)
#         print(f"üîî –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {count} –æ—Ç–∂–∏–º–∞–Ω–∏–π")
#         await process_pushup_count(bot, callback.message.message_id, group_id, callback.message.message_thread_id, user_id, count)
