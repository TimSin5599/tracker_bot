from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CommandHandler
from bot.database.storage import (
    get_group_stats,
    get_users_without_pushups_today,
    update_user_activity, get_pushup_stats
)

async def start_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∂–∏–º–∞–Ω–∏—è", callback_data="add_pushups"),
            InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="stats"),
        ],
        [
            InlineKeyboardButton("–ü–æ–º–æ—â—å", callback_data="help"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ", callback_data="consent_yes")],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data="consent_no")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    user = update.effective_user
    chat = update.effective_chat

    from bot.database.session import async_session  # import sessionmaker

    async with async_session() as session:
        await update_user_activity(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name,
            group_id=str(chat.id) if chat.type in ['group', 'supergroup'] else None,
            group_name=chat.title if chat.type in ['group', 'supergroup'] else None
        )

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–∂–∏–º–∞–Ω–∏–π!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
        "‚Ä¢ –í–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∂–∏–º–∞–Ω–∏–π üìä\n"
        "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ–± –æ—Ç–∂–∏–º–∞–Ω–∏—è—Ö ‚è∞\n"
        "‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º üèÜ\n\n"
        "–î–ª—è —Ä–∞–±–æ—Ç—ã –º–Ω–µ –Ω—É–∂–Ω–æ –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
        reply_markup=reply_markup
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
    üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

    –õ–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
    /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
    /stats - –õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

    –ì—Ä—É–ø–ø–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /group_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã
    /lazy - –ö—Ç–æ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª –æ—Ç–∂–∏–º–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è

    –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫—Ä—É–∂–æ—á–∫–∏ –≤ —á–∞—Ç: ‚óã ‚ö™ ‚≠ï üîµ
    1 –∫—Ä—É–∂–æ–∫ = N –æ—Ç–∂–∏–º–∞–Ω–∏–π
    """
    await update.message.reply_text(help_text)

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –ø–æ –æ—Ç–∂–∏–º–∞–Ω–∏—è–º)"""
    group_id = update.effective_chat.id if update.effective_chat else None
    user_id = update.effective_user.id if update.effective_user else None
    pushup_stats = await get_pushup_stats(group_id=group_id, user_id=user_id)

    if not pushup_stats:
        await update.message.reply_text("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return

    response = "üìä –ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê\n\n"
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∂–∏–º–∞–Ω–∏–π
    response += "üèÜ –û–¢–ñ–ò–ú–ê–ù–ò–Ø:\n"

    if isinstance(pushup_stats, dict):
        response += f"{pushup_stats['username']}:\n"
        response += f"   üìÖ –°–µ–≥–æ–¥–Ω—è: {pushup_stats['today_pushups']}\n"
        response += f"   üèãÔ∏è –í—Å–µ–≥–æ: {pushup_stats['total_pushups']}\n"
    else:
        for i, user in enumerate(pushup_stats, 1):
            response += f"{i}. {user['username']}:\n"
            response += f"   üìÖ –°–µ–≥–æ–¥–Ω—è: {user['today_pushups']}\n"
            response += f"   üèãÔ∏è –í—Å–µ–≥–æ: {user['total_pushups']}\n"

    await update.message.reply_text(response)

async def stats_group_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /group_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã"""
    if update.effective_chat.type not in ['group', 'supergroup']:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return

    chat_id = str(update.effective_chat.id)

    try:
        stats = await get_group_stats(chat_id)

        if not stats or not stats['members']:
            await update.message.reply_text("üìä –í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–∂–∏–º–∞–Ω–∏—è—Ö")
            return

        response = f"üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã {stats['group_name']}:\n\n"
        response += f"–í—Å–µ–≥–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π: {stats['total_pushups']} üèãÔ∏è\n"
        response += f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats['member_count']} üë•\n\n"
        response += "–¢–æ–ø —Å–µ–≥–æ–¥–Ω—è:\n"

        for i, member in enumerate(stats['members'][:10], 1):
            response += f"{i}. {member['username']}: {member['today_pushups']} –æ—Ç–∂–∏–º–∞–Ω–∏–π\n"

        await update.message.reply_text(response)

    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        print(f"Error in stats_command: {e}")


async def lazy_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /lazy - –ø–æ–∫–∞–∑–∞—Ç—å –∫—Ç–æ –Ω–µ —Å–¥–µ–ª–∞–ª –æ—Ç–∂–∏–º–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è"""
    if update.effective_chat.type not in ['group', 'supergroup']:
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return

    chat_id = str(update.effective_chat.id)

    try:
        lazy_users = await get_users_without_pushups_today(group_id=chat_id)

        if not lazy_users:
            await update.message.reply_text("‚úÖ –°–µ–≥–æ–¥–Ω—è –≤—Å–µ —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –æ—Ç–∂–∏–º–∞–Ω–∏—è! –ú–æ–ª–æ–¥—Ü—ã! üèÜ")
            return

        response = "üò¥ –ï—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ –æ—Ç–∂–∏–º–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è:\n\n"
        for user in lazy_users:
            response += f"‚Ä¢ {user.username or user.first_name}\n"

        response += "\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–∂–∏–º–∞–Ω–∏—è! üí™"

        await update.message.reply_text(response)

    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        print(f"Error in lazy_command: {e}")


def setup_command_handlers(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("group_stats", stats_group_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("lazy", lazy_command))