from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from numpy.core.defchararray import upper

from bot.database.session import async_session
from bot.database.storage import (
    update_user_activity, save_user_consent, get_or_create_group, get_all_types_training_group, add_training_type,
    get_user_stats, get_users_without_training_today, get_required_count, get_or_create_user, get_group_stats,
    get_today_records
)
from bot.handlers.possible_states import PossibleStates

router = Router()

@router.message(CommandStart())
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""

    user = message.from_user
    chat = message.chat
    topic_id = message.message_thread_id if message else None

    async with async_session() as session:
        await update_user_activity(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name,
            group_id=str(chat.id) if chat.type in ['group', 'supergroup', 'private'] else None,
            group_name=chat.title if chat.type in ['group', 'supergroup', 'private'] else None,
            topic_id=topic_id,
        )

    await save_user_consent(user.id, user.username, user.first_name)

    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–∂–∏–º–∞–Ω–∏–π!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
        "‚Ä¢ –í–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∂–∏–º–∞–Ω–∏–π üìä\n"
        "‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ–± –æ—Ç–∂–∏–º–∞–Ω–∏—è—Ö ‚è∞\n"
        "‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º üèÜ\n\n"
        "–í–∞–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä—É–∂–æ–∫ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /add –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ—Ç–∂–∏–º–∞–Ω–∏–π\n\n"
    )

@router.message(Command(commands='help'))
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
    üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

    –õ–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
    /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
    /stats - –õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    /add_type - –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π

    –ì—Ä—É–ø–ø–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /group_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã
    /lazy - –ö—Ç–æ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª –æ—Ç–∂–∏–º–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è

    –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫—Ä—É–∂–æ—á–∫–∏ –≤ —á–∞—Ç: ‚óã ‚ö™ ‚≠ï üîµ
    1 –∫—Ä—É–∂–æ–∫ = N –æ—Ç–∂–∏–º–∞–Ω–∏–π
    """
    await message.answer(help_text)

@router.message(Command(commands='add_type'))
async def add_type(message: Message, state: FSMContext):
    await get_or_create_user(user_id=message.from_user.id,
                             username=message.from_user.username,
                             first_name=message.from_user.first_name,
                             last_name=message.from_user.last_name, )
    await get_or_create_group(group_id=str(message.chat.id),
                              group_name=message.chat.title,
                              topic_id=message.message_thread_id)

    await state.set_state(PossibleStates.create_training_type)
    await message.answer(
        '''–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å'''
    )

@router.message(PossibleStates.create_training_type)
async def create_training_type(message: Message, state: FSMContext):
    new_type = message.text.strip()
    group_id = str(message.chat.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø
    existing_types = await get_all_types_training_group(group_id=group_id)
    if new_type in existing_types:
        await message.answer("‚ùå –≠—Ç–æ—Ç —Ç–∏–ø —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return

    await state.set_state(PossibleStates.choose_count)
    await state.set_data({
        'training_type': new_type,
    })
    await message.answer(f"‚úÖ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")

@router.message(PossibleStates.choose_count)
async def choose_count(message: Message, state: FSMContext):
    training_type = str(await state.get_value('training_type'))
    group_id = str(message.chat.id)
    required_count = message.text.strip()

    try:
        required_count = int(required_count)
        await add_training_type(group_id=group_id, training_type=training_type, required_count=required_count)
        await state.clear()
        await message.answer(f"‚úÖ –¢–∏–ø '{training_type}' —Å–æ–∑–¥–∞–Ω —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º {required_count}!")
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15, 30, 42)")

@router.message(Command(commands='stats'))
async def stats_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –ø–æ –æ—Ç–∂–∏–º–∞–Ω–∏—è–º)"""

    await get_or_create_user(user_id=message.from_user.id,
                             username=message.from_user.username,
                             first_name=message.from_user.first_name,
                             last_name=message.from_user.last_name, )
    await get_or_create_group(group_id=str(message.chat.id),
                              group_name=message.chat.title,
                              topic_id=message.message_thread_id)

    tg_user = message.from_user if message.from_user else None
    pushup_stats = await get_user_stats(tg_user=tg_user, tg_group=message.chat)

    if not pushup_stats:
        await message.answer("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return

    response = f"üìä –ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê @{message.from_user.username}\n\n"
    for key, value in pushup_stats.items():
        response += f"üèÜ {key}:\n"
        response += f"   üìÖ –°–µ–≥–æ–¥–Ω—è: {value['today']}\n"
        response += f"   üèãÔ∏è –í—Å–µ–≥–æ: {value['total']}\n\n"

    await message.answer(response)

@router.message(Command(commands='group_stats'))
async def stats_group_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /group_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã"""
    if message.chat.type not in ['group', 'supergroup']:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return

    await get_or_create_user(user_id=message.from_user.id,
                             username=message.from_user.username,
                             first_name=message.from_user.first_name,
                             last_name=message.from_user.last_name, )
    await get_or_create_group(group_id=str(message.chat.id),
                              group_name=message.chat.title,
                              topic_id=message.message_thread_id)

    chat_id = str(message.chat.id)

    try:
        stats = await get_group_stats(chat_id)

        if not stats:
            await message.answer("üìä –í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–∂–∏–º–∞–Ω–∏—è—Ö")
            return

        response = f"üèÜ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥—Ä—É–ø–ø—ã {message.chat.title}:\n\n"
        response += f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(stats.items())} üë•\n\n"
        for user, user_stats in stats.items():
            response += f"@{user}:\n"
            for type, type_stats in user_stats.items():
                if type == 'total_size_trainings': continue
                response += f"    ‚Ä¢ {upper(type)}:\n        –°–µ–≥–æ–¥–Ω—è - {type_stats['today']}, –≤—Å–µ–≥–æ - {type_stats['total']}\n"
            total_size_trainings = user_stats['total_size_trainings']
            response += f"\n    –û–±—â–µ–µ —á–∏—Å–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π - {total_size_trainings}\n"
        await message.answer(response)

    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        print(f"Error in stats_command: {e}")

# @router.message(Command(commands='change_required'))
# async def change_required(message: Message, state: FSMContext):


@router.message(Command(commands=['lazy', 'remove']))
async def choose_training_type(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /lazy - –ø–æ–∫–∞–∑–∞—Ç—å –∫—Ç–æ –Ω–µ —Å–¥–µ–ª–∞–ª –æ—Ç–∂–∏–º–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è"""
    if message.chat.type not in ['group', 'supergroup']:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return

    await get_or_create_user(user_id=message.from_user.id,
                             username=message.from_user.username,
                             first_name=message.from_user.first_name,
                             last_name=message.from_user.last_name, )
    await get_or_create_group(group_id=str(message.chat.id),
                              group_name=message.chat.title,
                              topic_id=message.message_thread_id)

    all_types_training_group = await get_all_types_training_group(group_id=str(message.chat.id))

    if len(all_types_training_group) == 0:
        await message.answer('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∏–ø—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π')
        return

    keyboard = []
    for type in all_types_training_group:
        keyboard.append([InlineKeyboardButton(text=type, callback_data='type_' + type)])

    if message.text.lower() == 'lazy':
        keyboard.append([InlineKeyboardButton(text='–í—Å–µ', callback_data='type_all')])

    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await message.answer(
        "üí™ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )

    await state.clear()
    await state.set_state(PossibleStates.choose_training_type)
    await state.set_data({
        'command': str(message.text)
    })

@router.callback_query(PossibleStates.choose_training_type)
async def callback_choose_training_type(callback: CallbackQuery, state: FSMContext):
    callback_data = callback.data.split('_')[1]
    command = str(await state.get_value('command'))

    if callback_data == '':
        return

    if command == '/lazy':
        await callback.edit_message_text('–ú–µ—Ç–æ–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...')
    elif command == '/remove':
        keyboard = [
            [InlineKeyboardButton(text="10", callback_data="count_10"),
             InlineKeyboardButton(text="15", callback_data="count_15")],
            [InlineKeyboardButton(text="20", callback_data="count_20"),
             InlineKeyboardButton(text="30", callback_data="count_30"),
             InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ —á–∏—Å–ª–æ", callback_data="count_custom")],
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="count_0")]
        ]

        await state.clear()
        await state.set_state(PossibleStates.awaiting_remove)
        await state.set_data({
            'record_type': callback_data
        })
        await callback.message.edit_text(text=f'–¢–∏–ø: {callback_data.upper()}\n–í—ã–±–µ—Ä–µ—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:',reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard))
    else:
        await state.clear()
        return

@router.message(Command(commands='types'))
async def types_command(message: Message, state: FSMContext):
    await get_or_create_user(user_id=message.from_user.id,
                             username=message.from_user.username,
                             first_name=message.from_user.first_name,
                             last_name=message.from_user.last_name,)
    await get_or_create_group(group_id=str(message.chat.id),
                              group_name=message.chat.title,
                              topic_id=message.message_thread_id)

    all_types = await get_all_types_training_group(group_id=str(message.chat.id))

    if all_types is None or len(all_types) == 0:
        await message.answer(f'–í –≥—Ä—É–ø–ø–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n'
                             f'–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É - –≤–≤–µ–¥–∏—Ç–µ /add_type')
        return

    result = f"–í—Å–µ –≤–∏–¥—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –≥—Ä—É–ø–ø–µ {message.chat.title}:\n\n"
    for type in all_types:
        result += f" ‚Ä¢ {type}\n"
    await message.answer(result)

# @router.callback_query(PossibleStates.awaiting_remove)
# async def handle_remove_count_callback(callback: CallbackQuery, state: FSMContext):
#     print('handle_remove_count_callback')
#     callback_data = callback.data.split('_')[1]
#     record_type = await state.get_value('record_type')
#     print(isinstance(callback_data, int), record_type)
#     if callback_data == '':
#         await state.clear()
#         return
#     elif callback_data == 'custom':
#         print()
#     else:
#         callback_data = int(callback_data)
#
#         if callback_data == 0:
#             await state.clear()
#             await callback.message.delete()
#             return
#
#         await update_records(user=callback.message.from_user,
#                              group=callback.message.chat,
#                              count=-callback_data,
#                              record_type=record_type)
#         await state.clear()