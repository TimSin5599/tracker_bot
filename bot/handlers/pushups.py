import re
from aiogram import Router, types, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from sqlalchemy import select
from bot.database.models import Group

from bot.database.session import async_session
from bot.database.storage import add_pushups


async def handle_pushup_video_note(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ—á–∫–∞ - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å —É–¥–æ–±–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    if not message or not message.from_user:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö: update.message –∏–ª–∏ from_user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return

    group_id = message.chat.id if message.chat else None
    topic_id = message.message_thread_id if message else None

    async with async_session() as session:
        result = await session.execute(
            select(Group).where((Group.group_id == group_id) &
                                (Group.topic_id == topic_id))
        )
        group = result.scalar_one_or_none()
        if group:
            print(f"üîç –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ {group.group_id}, –ø—Ä–æ–≤–µ—Ä—è—é topic_id={topic_id} vs {group.topic_id}")
        else:
            print(f"‚ùå –ì—Ä—É–ø–ø–∞ {group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
            return

    user = message.from_user

    if message.video_note or message.video:
        # –û–ß–ò–©–ê–ï–ú –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.clear()

        # –£–¥–æ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏
        keyboard = [
            [InlineKeyboardButton(text="15 –æ—Ç–∂–∏–º–∞–Ω–∏–π", callback_data="pushup_15"),
             InlineKeyboardButton(text="30 –æ—Ç–∂–∏–º–∞–Ω–∏–π", callback_data="pushup_30")],
            [InlineKeyboardButton(text="50 –æ—Ç–∂–∏–º–∞–Ω–∏–π", callback_data="pushup_50"),
             InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ —á–∏—Å–ª–æ", callback_data="pushup_custom")],
            [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="pushup_0")]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        await message.answer(
            "üí™ –°–∫–æ–ª—å–∫–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π –≤—ã —Å–¥–µ–ª–∞–ª–∏ –≤ —ç—Ç–æ–º –ø–æ–¥—Ö–æ–¥–µ?\n\n"
            "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
            "‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë —á–∏—Å–ª–æ\n"
            "‚Ä¢ ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
            reply_markup=reply_markup
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä—É–∂–æ—á–∫–µ
        await state.set_data({
            "last_video_note": message.video_note,
            'awaiting_pushup_count': True
        })

        print(f"üìπ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –≤–∏–¥–µ–æ: {state}")


async def handle_pushup_count_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∂–∏–º–∞–Ω–∏–π —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏"""
    await callback.answer()

    user_id = callback.from_user.id
    # callback_data = query.data
    # print(f"üîî –ü–æ–ª—É—á–µ–Ω callback: {callback_data}")

    group_id = callback.chat if callback else None

    count_str = callback.data.split('_')[1]

    if count_str == 'custom':
        # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–î—Ä—É–≥–æ–µ —á–∏—Å–ª–æ" –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ
        print("üîî –ó–∞–ø—Ä–æ—à–µ–Ω –≤–≤–æ–¥ —Å–≤–æ–µ–≥–æ —á–∏—Å–ª–∞")

        keyboard = [
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="pushup_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û–ß–ò–©–ê–ï–ú –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ
        await state.clear()  # –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.set_data({
            'awaiting_exact_count': True,
            'user_id': user_id,
            'last_bot_message_id': callback.message.message_id
        })

        # context.user_data['last_bot_message_id'] = update.callback_query.message.message_id

        print(f"üîî –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è: {state}")

        await callback.edit_text(
            "üî¢ –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π:\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n"
            "–ü—Ä–∏–º–µ—Ä—ã: 15, 30, 42\n\n",
            reply_markup=reply_markup
        )
        return

    elif count_str == '0' or count_str == 'cancel':
        # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" - –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        print("üîî –ü—Ä–æ–ø—É—Å–∫ –ø–æ–¥—Ö–æ–¥–∞ - —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
        await callback.delete()
        await state.clear()
        return

    else:
        # –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
        count = int(count_str)
        print(f"üîî –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {count} –æ—Ç–∂–∏–º–∞–Ω–∏–π")
        await process_pushup_count(callback, user_id, count, group_id.id)


async def handle_pushup_text_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∂–∏–º–∞–Ω–∏–π"""
    print("üéØ handle_pushup_text_input –í–´–ó–í–ê–ù!")

    if not message:
        print("‚ùå –ù–µ—Ç update.message")
        return
    if not message.text:
        print("‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
        return

    user_id = message.from_user.id
    text = message.text.strip()

    print(f"üîç –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç user_id={user_id}: '{text}'")
    print(f"üîç –í–°–ï user_data: {message.user_data}")

    # –ü–†–û–í–ï–†–Ø–ï–ú –°–û–°–¢–û–Ø–ù–ò–Ø
    awaiting_exact = state.get_value('awaiting_exact_count')
    awaiting_pushup = state.get_value('awaiting_pushup_count')
    user_id_in_context = state.get_value('user_id')

    print(f"üîç –°–æ—Å—Ç–æ—è–Ω–∏—è: exact={awaiting_exact}, pushup={awaiting_pushup}, context_user_id={user_id_in_context}")

    # –ü–†–ò–û–†–ò–¢–ï–¢: —Å–Ω–∞—á–∞–ª–∞ exact, –ø–æ—Ç–æ–º pushup
    if awaiting_exact and user_id_in_context == user_id:
        print("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ...")
        try:
            count = int(text)

            if count == 0:
                user_msg_id = message.message_id
                bot_msg_id = message.user_data.get('last_bot_message_id')

                await message.delete()
                if bot_msg_id:
                    await message.chat.delete_message(bot_msg_id)

                message.user_data.clear()
                print("‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ")
                return

            if count < 0:
                await message.reply_text("‚ùå –ß–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
                return

            if count > 200:
                await message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ. –ú–∞–∫—Å–∏–º—É–º 200")
                return

            # –ü–æ–ª—É—á–∞–µ–º group_id
            group_id = message.effective_chat.id if message.effective_chat else None
            # –ü–ï–†–ï–î–ê–ï–ú update, user_id, count, group_id
            await process_pushup_count(message, user_id, count, group_id)

            if count > 0 and count < 200:
                user_msg_id = message.message_id
                bot_msg_id = message.user_data.get('last_bot_message_id')

                if bot_msg_id:
                    await message.chat.delete_message(bot_msg_id)
                await message.chat.delete_message(user_msg_id)

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ")

        except ValueError:
            await message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15, 30, 42)")

    elif awaiting_pushup:
        print("üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –∫—Ä—É–∂–æ—á–∫–∞...")
        try:
            count = int(text)
            if count < 0:
                await message.reply_text("‚ùå –ß–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
                return

            if count > 200:
                await message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ. –ú–∞–∫—Å–∏–º—É–º 200")
                return

            group_id = message.effective_chat.id if message.effective_chat else None
            # –ü–ï–†–ï–î–ê–ï–ú update, user_id, count, group_id
            await process_pushup_count(message, user_id, count, group_id)

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
            print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ")

        except ValueError:
            await message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏")

    else:
        print("üîç –ù–µ –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫—Ä—É–∂–æ—á–∫–∏...")
        await handle_pushup_text_circles(message)


async def process_pushup_count(callback: CallbackQuery, user_id, count, group_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∂–∏–º–∞–Ω–∏–π"""

    today_total, actual_count, used_weight = await add_pushups(user_id, group_id, count)

    if count <= 15:
        emoji = "üë∂"
        level = "–ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å"
    elif count <= 30:
        emoji = "üí™"
        level = "–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å"
    elif count <= 50:
        emoji = "üî•"
        level = "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å"
    else:
        emoji = "üèÜ"
        level = "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–∏ÃÜ —É—Ä–æ–≤–µ–Ω—å"

    # –ü–†–ê–í–ò–õ–¨–ù–û –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å
    await callback.message.edit_text(
        f"{emoji} {level}\n"
        f"‚úÖ –ó–∞—Å—á–∏—Ç–∞–Ω–æ: {actual_count} –æ—Ç–∂–∏–º–∞–Ω–∏–π!\n"
        f"üìä –°–µ–≥–æ–¥–Ω—è: {today_total} –æ—Ç–∂–∏–º–∞–Ω–∏–π\n"
        f"üéØ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
    )


async def cancel_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await message.answer("‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω")


async def handle_pushup_text_circles(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫—Ä—É–∂–æ—á–∫–æ–≤"""
    if not message or not message.from_user:
        return

    user = message.from_user
    user_id = user.id


    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ —á–∏—Å–ª–∞
    if state.get_value('awaiting_exact_count') or state.get_value('awaiting_pushup_count'):
        print("üîç –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫—Ä—É–∂–æ—á–∫–∏ - –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ —á–∏—Å–ª–∞")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫—Ä—É–∂–æ—á–µ–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    message_text = message.text or ""
    circle_pattern = r'[‚óã‚ö™‚≠ïüîµüîò‚óØ„Äá‚ö¨üîÑüí™]'
    circles = re.findall(circle_pattern, message_text)

    if circles:
        count = len(circles)
        today_total, actual_count, used_weight = await add_pushups(user_id, count)

        await message.answer(
            f"üí™ –ó–∞—Å—á–∏—Ç–∞–Ω–æ: {actual_count} –æ—Ç–∂–∏–º–∞–Ω–∏–π –∑–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫—Ä—É–∂–æ—á–∫–∏!\n"
            f"üìä –°–µ–≥–æ–¥–Ω—è: {today_total} –æ—Ç–∂–∏–º–∞–Ω–∏–π\n"
            f"‚öñÔ∏è –í–µ—Å –∫—Ä—É–∂–∫–∞: {used_weight}"
        )


def setup_pushups_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Ç–∂–∏–º–∞–Ω–∏–π"""
    print("üîÑ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–∂–∏–º–∞–Ω–∏–π...")

    router = Router()

    # 1. Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–í–´–°–û–ö–ò–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    router.message.register(
        handle_pushup_count_callback,
        lambda message: message.text is not None and not message.text.startswith("/pushup_")
    )

    # 2. –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–ù–ò–ó–ö–ò–ô –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    router.message.register(
        handle_pushup_text_input,
        lambda message: message.text is not None and not message.text.startswith("/")
    )

    # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –∏ –≤–∏–¥–µ–æ–∑–∞–º–µ—Ç–æ–∫
    router.message.register(
        handle_pushup_video_note,
        lambda message: message.video_note is not None or message.video is not None
    )

    # 4. –ö–æ–º–∞–Ω–¥—ã
    print("üìå –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã...")
    # router.message.register(correct_pushups_command, Command(commands=["correct"]))
    router.message.register(cancel_command, Command(commands=["cancel"]))

    # –í–∫–ª—é—á–∞–µ–º router –≤ Dispatcher
    dp.include_router(router)

    print("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


# async def correct_pushups_command(message: Message):
#     """–ö–æ–º–∞–Ω–¥–∞ /correct - —Ä—É—á–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞"""
#     if not context.args:
#         await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /correct <—á–∏—Å–ª–æ>")
#         return
#
#     try:
#         correct_count = int(context.args[0])
#         user_id = update.message.from_user.id
#         group_id = str(update.effective_chat.id) if update.effective_chat else None
#         topic_id = update.message.message_thread_id if update.message else None
#
#         # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
#         today_total, actual_count, used_weight = await add_pushups(user_id=user_id, group_id=group_id, count=correct_count, topic_id=topic_id)
#
#         await update.message.reply_text(
#             f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ! –ó–∞—Å—á–∏—Ç–∞–Ω–æ: {actual_count} –æ—Ç–∂–∏–º–∞–Ω–∏–π\n"
#             f"üìä –°–µ–≥–æ–¥–Ω—è: {today_total} –æ—Ç–∂–∏–º–∞–Ω–∏–π"
#         )
#
#     except ValueError:
#         await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã")