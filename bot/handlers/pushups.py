import re
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from sqlalchemy import select
from bot.database.models import Group

from bot.database.session import async_session
from bot.database.storage import add_pushups, get_all_types_training_group, get_id_group_training_type, \
    get_or_create_user, get_or_create_group
from bot.handlers.possible_states import PossibleStates

router = Router()

@router.message(Command(commands='add'))
@router.message(F.video_note)
@router.message(F.video)
async def handle_select_trainig_type(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ—á–∫–∞ - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å —É–¥–æ–±–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    if not message or not message.from_user:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö: update.message –∏–ª–∏ from_user –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        return

    user = await get_or_create_user(user_id=message.from_user.id,
                                    username=message.from_user.username,
                                    first_name=message.from_user.first_name,
                                    last_name=message.from_user.last_name)
    group = await get_or_create_group(group_id=str(message.chat.id),
                                      group_name=message.chat.title,
                                      topic_id=message.message_thread_id)
    group_id = group.group_id
    topic_id = message.message_thread_id if message else None

    async with async_session() as session:
        result = await session.execute(
            select(Group).where((Group.group_id == group_id) &
                                (Group.topic_id == topic_id))
        )
        group = result.scalar_one_or_none()
        if group:
            print(f"üîç –ù–∞–π–¥–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ {group.group_id}, –ø—Ä–æ–≤–µ—Ä—è—é topic_id={topic_id} vs {group.topic_id}")
        else:
            print(f"‚ùå –ì—Ä—É–ø–ø–∞ {group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
            return

    # –û–ß–ò–©–ê–ï–ú –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()

    # –£–¥–æ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏
    all_types_training_group = await get_all_types_training_group(group_id=group_id)

    if len(all_types_training_group) == 0:
        await message.answer('''–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –ø–æ–¥—Ö–æ–¥—ã –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º, –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö —Ç–∏–ø—ã —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /add_type''')
        return

    keyboard = []
    for type in all_types_training_group:
        keyboard.append([InlineKeyboardButton(text=type, callback_data='type_'+type)])
    keyboard.append([InlineKeyboardButton(text='‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='type_cancel')])
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await message.answer(
        "üí™ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )

    print(f'user_id={message.from_user.id}')

    await state.set_state(PossibleStates.awaiting_type_training)

@router.callback_query(PossibleStates.awaiting_type_training)
async def handle_awaiting_type_training(callback: CallbackQuery, state: FSMContext):
    type_training = callback.data.split('_')[1]
    print(f'type_training: {type_training}, user_id={callback.from_user.id}')

    if type_training == 'cancel':
        await state.clear()
        await callback.message.delete()
        return

    keyboard = [
        [InlineKeyboardButton(text="10", callback_data="count_10"),
         InlineKeyboardButton(text="15", callback_data="count_15")],
        [InlineKeyboardButton(text="20", callback_data="count_20"),
         InlineKeyboardButton(text="30", callback_data="count_30"),
         InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ —á–∏—Å–ª–æ", callback_data="count_custom")],
        [InlineKeyboardButton(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="count_0")]
    ]

    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

    await callback.message.edit_text(
        text =f'{type_training}\n\n' +
        'üí™ –ö–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã —Å–¥–µ–ª–∞–ª–∏ –≤ —ç—Ç–æ–º –ø–æ–¥—Ö–æ–¥–µ?\n' +
        '‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≤–µ–ª–∏—á–∏–Ω—É\n' +
        '‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë —á–∏—Å–ª–æ\n' +
        '‚Ä¢ ‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
        reply_markup=reply_markup
    )

    await state.clear()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä—É–∂–æ—á–∫–µ
    await state.set_data({
        'training_type': type_training,
        'last_video_note': callback.message.video_note,
        'user_id': callback.message.from_user.id
    })

    await state.set_state(PossibleStates.awaiting_count)

    print(f"üìπ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –≤–∏–¥–µ–æ: {state}")

@router.callback_query(PossibleStates.awaiting_count)
async def handle_count_callback(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏"""
    state_user_id = await state.get_value('user_id')
    training_type = await state.get_value('training_type')

    if state_user_id is None:
        await state.clear()
        return

    if state_user_id != callback.message.from_user.id:
        await bot.send_message(
            chat_id=callback.message.chat.id,
            message_thread_id=callback.message.message_thread_id,
            text=f'''–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π –∑–∞ –¥—Ä—É–≥–∏—Ö'''
        )
        return

    await callback.answer()

    user_id = callback.from_user.id
    group_id = str(callback.message.chat.id) if callback.message else None
    count_str = callback.data.split('_')[1]

    if count_str == 'custom':
        # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–î—Ä—É–≥–æ–µ —á–∏—Å–ª–æ" –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ
        print("üîî –ó–∞–ø—Ä–æ—à–µ–Ω –≤–≤–æ–¥ —Å–≤–æ–µ–≥–æ —á–∏—Å–ª–∞")

        keyboard = [
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="count_cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        # –û–ß–ò–©–ê–ï–ú –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ
        await state.clear()  # –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è

        await state.set_state(PossibleStates.awaiting_count)
        await state.set_data({
            'user_id': user_id,
            'bot_msg_id': callback.message.message_id,
            'training_type': training_type
        })

        print(f"üîî –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è: {await state.get_data()}")

        await callback.message.edit_text(
            "üî¢ –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π:\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n"
            "–ü—Ä–∏–º–µ—Ä—ã: 15, 30, 42\n\n",
            reply_markup=reply_markup
        )
        return

    elif count_str == '0' or count_str == 'cancel':
        # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" - –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        print("üîî –ü—Ä–æ–ø—É—Å–∫ –ø–æ–¥—Ö–æ–¥–∞ - —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
        await callback.message.delete()
        await state.clear()
        return

    else:
        # –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
        count = int(count_str)
        print(f"üîî –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {count} –æ—Ç–∂–∏–º–∞–Ω–∏–π")
        await process_pushup_count(bot=bot,
                                   bot_message_id=callback.message.message_id,
                                   group_id=group_id,
                                   topic_id=callback.message.message_thread_id,
                                   user_id=user_id,
                                   count=count,
                                   training_type=training_type)

        await state.clear()
        print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ")

@router.message(PossibleStates.awaiting_count)
async def handle_pushup_text_input(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∂–∏–º–∞–Ω–∏–π"""

    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω—è–ª —à–∞–≥–∏ –¥–æ —ç—Ç–æ–≥–æ"""
    state_user_id = await state.get_value('user_id')
    training_type = await state.get_value('training_type')

    if state_user_id is None or training_type is None:
        await state.clear()
        return

    if state_user_id != message.from_user.id:
        await bot.send_message(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text=f'''–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∂–∏–º–∞–Ω–∏–π –∑–∞ –¥—Ä—É–≥–∏—Ö'''
        )
        return


    if not message:
        print("‚ùå –ù–µ—Ç update.message")
        return
    if not message.text:
        print("‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
        return


    user_id = message.from_user.id
    text = message.text.strip()

    print(f"üîç –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –æ—Ç user_id={user_id}: '{text}'")
    print(f"üîç –í–°–ï user_data: {message.from_user}")

    # –ü–†–û–í–ï–†–Ø–ï–ú –°–û–°–¢–û–Ø–ù–ò–Ø
    user_id_in_context = await state.get_value('user_id')
    try:
        count = int(text)

        if count == 0:
            user_msg_id = message.message_id
            bot_msg_id = await state.get_value('bot_msg_id')

            await message.delete()
            if bot_msg_id:
                await bot.delete_message(
                    chat_id=message.chat.id,
                    message_id=bot_msg_id
                )

            await state.clear()
            await message.delete()
            print("‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ")
            return

        if count < 0:
            await message.reply_text("‚ùå –ß–∏—Å–ª–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            return

        if count > 200:
            await message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ. –ú–∞–∫—Å–∏–º—É–º 200")
            return

        # –ü–æ–ª—É—á–∞–µ–º group_id
        group_id = str(message.chat.id)
        bot_message_id = await state.get_value('bot_msg_id')
        # –ü–ï–†–ï–î–ê–ï–ú update, user_id, count, group_id
        await process_pushup_count(bot=bot,
                                   bot_message_id=bot_message_id,
                                   group_id=group_id,
                                   topic_id=message.message_thread_id,
                                   user_id=user_id,
                                   count=count,
                                   training_type=training_type)
        await message.chat.delete_message(message.message_id)

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        print("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ")

    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15, 30, 42)")



async def process_pushup_count(bot: Bot, bot_message_id, group_id: str, topic_id, user_id, count, training_type):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∂–∏–º–∞–Ω–∏–π"""
    summary_record, today_total, actual_count = await add_pushups(user_id=user_id, group_id=group_id, type_record=training_type, count=count, topic_id=topic_id)
    user = await get_or_create_user(user_id=user_id)

    if count <= 15:
        emoji = "üë∂"
        level = "–ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å"
    elif count <= 30:
        emoji = "üí™"
        level = "–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å"
    elif count <= 50:
        emoji = "üî•"
        level = "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —É—Ä–æ–≤–µ–Ω—å"
    else:
        emoji = "üèÜ"
        level = "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–∏ÃÜ —É—Ä–æ–≤–µ–Ω—å"

    # –ü–†–ê–í–ò–õ–¨–ù–û –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫ –æ—Ç–≤–µ—á–∞—Ç—å
    await bot.edit_message_text(
        chat_id=group_id,
        message_id=bot_message_id,
        text=
            f"{training_type} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username}\n\n"
            f"{emoji} {level}\n"
            f"‚úîÔ∏è –ó–∞—Å—á–∏—Ç–∞–Ω–æ: {actual_count}!\n"
            f"üìÖ –°–µ–≥–æ–¥–Ω—è: {today_total}\n"
            f"üìà –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: {summary_record}\n"
            f"‚≠ê –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üéØ"
    )

@router.message(Command(commands='/cancel'))
async def cancel_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞"""
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await message.answer("‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω")


# async def handle_pushup_text_circles(message: Message, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫—Ä—É–∂–æ—á–∫–æ–≤"""
#     if not message or not message.from_user:
#         return
#
#     user = message.from_user
#     user_id = user.id
#
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ —á–∏—Å–ª–∞
#     if await state.get_value('awaiting_exact_count') or await state.get_value('awaiting_pushup_count'):
#         print("üîç –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫—Ä—É–∂–æ—á–∫–∏ - –æ–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ —á–∏—Å–ª–∞")
#         return
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫—Ä—É–∂–æ—á–µ–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
#     message_text = message.text or ""
#     circle_pattern = r'[‚óã‚ö™‚≠ïüîµüîò‚óØ„Äá‚ö¨üîÑüí™]'
#     circles = re.findall(circle_pattern, message_text)
#
#     if circles:
#         count = len(circles)
#         today_total, actual_count, used_weight = await add_pushups(user_id, count)
#
#         await message.answer(
#             f"üí™ –ó–∞—Å—á–∏—Ç–∞–Ω–æ: {actual_count} –æ—Ç–∂–∏–º–∞–Ω–∏–π –∑–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫—Ä—É–∂–æ—á–∫–∏!\n"
#             f"üìä –°–µ–≥–æ–¥–Ω—è: {today_total} –æ—Ç–∂–∏–º–∞–Ω–∏–π\n"
#             f"‚öñÔ∏è –í–µ—Å –∫—Ä—É–∂–∫–∞: {used_weight}"
#         )


# async def correct_pushups_command(message: Message):
#     """–ö–æ–º–∞–Ω–¥–∞ /correct - —Ä—É—á–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞"""
#     if not context.args:
#         await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /correct <—á–∏—Å–ª–æ>")
#         return
#
#     try:
#         correct_count = int(context.args[0])
#         user_id = update.message.from_user.id
#         group_id = str(update.effective_chat.id) if update.effective_chat else None
#         topic_id = update.message.message_thread_id if update.message else None
#
#         # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
#         today_total, actual_count, used_weight = await add_pushups(user_id=user_id, group_id=group_id, count=correct_count, topic_id=topic_id)
#
#         await update.message.reply_text(
#             f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ! –ó–∞—Å—á–∏—Ç–∞–Ω–æ: {actual_count} –æ—Ç–∂–∏–º–∞–Ω–∏–π\n"
#             f"üìä –°–µ–≥–æ–¥–Ω—è: {today_total} –æ—Ç–∂–∏–º–∞–Ω–∏–π"
#         )
#
#     except ValueError:
#         await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã")