from aiogram.fsm.context import FSMContext

from bot.database.storage import get_or_create_group, get_users_without_training_today, get_required_count
from bot.handlers.possible_states import PossibleStates
from aiogram.types import CallbackQuery
from aiogram import Router

router = Router()

@router.callback_query(PossibleStates.choose_training_type)
async def lazy_callback(callback: CallbackQuery, state: FSMContext):
    if callback.message.chat.type not in ['group', 'supergroup']:
        await callback.message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return

    group_id = str(callback.message.chat.id)
    topic_id = callback.message.message_thread_id
    training_type = callback.data.split('_')[1]
    group = await get_or_create_group(group_id=group_id, topic_id=topic_id)

    if training_type == 'all':
        await callback.message.edit_text('–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ ...')
        # TO DO
    else:
        try:
            lazy_users = await get_users_without_training_today(group=group, training_type=training_type)
            required_count = await get_required_count(group_id=group_id, training_type=training_type)

            if not lazy_users:
                await callback.message.answer("‚úÖ –°–µ–≥–æ–¥–Ω—è –≤—Å–µ —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –æ—Ç–∂–∏–º–∞–Ω–∏—è! –ú–æ–ª–æ–¥—Ü—ã! üèÜ")
                return

            response = "üò¥ –ï—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ –æ—Ç–∂–∏–º–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è:\n\n"
            for user in lazy_users:
                response += f" ‚Ä¢ @{user.username} (–æ—Å—Ç–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å - {int(required_count) - user.count})\n"

            response += "\n–î–∞–≤–∞–π—Ç–µ —á–µ–º–ø–∏–æ–Ω—ã, –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—èüí™"

            await callback.message.answer(response)
            await state.clear()

        except Exception as e:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
            print(f"Error in lazy_callback: {e}")